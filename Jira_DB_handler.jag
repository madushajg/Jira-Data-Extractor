<%
var data = require('../config.json');        

if (request.getParameter("logout") == null && session.get("logged-in") != null) {
    var log = new Log();
    log.info("Dashboard hit - "+ session.get("username"));
    var reqFromUser = request.getParameter("reqFromUser");
    
    	  var prefix = "https://-/jira/rest/api/2/search";
    	  var supJiraURL = data.jira_db.supportJiraURL;

    var resultRetrived = false;
    
    if(("success").equals(reqFromUser)){
            resultRetrived = true;                
            
        }
        
        function getDateDiff(fromdate, toDate){
        	var date1 = new Date(fromdate);
        	var date2 = new Date(toDate);
        	
	        var timeDiff = date2.getTime() - date1.getTime();	        
        	var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24)); 
        	
        	return diffDays;
        	
        }
        
	    
	    function getCreatorTotal(){
	        return get(prefix ,{jql : "created>=-0d" , maxResults:"0"}, {"Authorization" : ""});
	    }
	    
	    function getUpdatedTotal(){
    	    return get(prefix ,{jql : "updated>=-0d" , maxResults:"0"}, {"Authorization" : ""});
    	}
    	
    	function getResolutionTotal(){
    	   	return get(prefix ,{jql : "resolutiondate>=-289d" , maxResults:"0"}, {"Authorization" : ""});
    	}
    	
		function getCreator(index){
		    return get(prefix ,{jql : "created>=-0d" , maxResults:"1000", "startAt":index, "fields":"creator,reporter,created"}, {"Authorization" : ""});
		}
		
		function getUpdates(index){
		    return get(prefix ,{jql : "updated>=-0d" , maxResults:"1000", "startAt":index, "fields":"*none"}, {"Authorization" : ""});
		}
		
		function getResolution(index){
		    return get(prefix ,{jql : "resolutiondate>=-289d" , maxResults:"1000", "startAt":index, "fields":"*none"}, {"Authorization" : ""});
		}
		
		function getCommenter(issuekey){
			var param1 = "key="+issuekey ;
			var a = get(prefix ,{jql : param1, "fields":"comment"},{ "Authorization" : ""});
			return a;
		}
		
		function getResolver(issuekey){
			var keyParam = "key="+issuekey ;
			var resData = get(prefix ,{jql : keyParam, "expand":"changelog"},{ "Authorization" : ""});
			return resData;
		}
		
		function getWorklog(issuekey){
			var wlParam = "key="+issuekey ;
			var wlData = get(prefix ,{jql : keyParam, "fields":"worklog"},{ "Authorization" : ""});
			return wlData;
		}
		     

	var date = new Date();
	var startdate = new Date(Date.now() - (86400000*14));
// 	var yesterday = new Date(Date.now() - 86400000);

	
	log.debug(date);
	log.debug(startdate);
	log.debug(getDateDiff(startdate,date));
	
    var config = {};
    var db = new Database("jdbc:mysql://localhost:3306/PMT_Jira", "", "", config);  


    try {
    	
    	    var totalIssuesCreated = JSON.parse(getCreatorTotal().data);   
    	    var totalIssuesUpdated = JSON.parse(getUpdatedTotal().data);  
    	    var totalIssuesResolved = JSON.parse(getResolutionTotal().data);
                                    
            var createdTotal = totalIssuesCreated.total;
            var updatedTotal = totalIssuesUpdated.total;
            var resolutionTotal = totalIssuesResolved.total;
                        
            
            // #################### INSERT CREATOR DATA IN TO ISSUE_CREATOR TABLE #####################
            var creator = null;
            var maxCr = 0;
            
            for(var s=0;s<createdTotal;s+=1000){
            	var issueData = JSON.parse(getCreator(s).data); 							
            	if(createdTotal-s<1000)
            		maxCr = createdTotal;
            	else 
            		maxCr= 1000;
            
            		for(var i=0;i<maxCr;i++){            													
            					if(issueData.issues[i].fields.creator !== null){ 															
            							creator = issueData.issues[i].fields.creator.name; 
            					}		
            					var query1  = "INSERT INTO ISSUE_CREATER (CREATED_DATE, JIRA_KEY, CREATED_BY) VALUES('"+issueData.issues[i].fields.created+"' , '"+issueData.issues[i].key+"', '"+creator+"');";
            					db.query(query1);
            					creator = null;
            		}         													 	
             }     
             log.debug("Insertion in to ISSUE_CREATOR finished successfully.");
            // #################### INSERT COMMENTING & WORKLOG DATA IN TO TABLES #####################
			  var commentDate = null;
			  var commenter = null;
			  var maxCm = 0;
                         
             for(var s=0;s<updatedTotal;s+=1000){
                 var updatedIssues = JSON.parse(getUpdates(s).data); 		
                 log.debug(updatedIssues);
                 if(updatedTotal-s<1000)
                    maxCm = updatedTotal;
                 else 
                    maxCm= 1000;
                         
                    for(var x=0;x<maxCm;x++){            													
                    	var issueKey = updatedIssues.issues[x].key;
                    	log.debug(issueKey);
                    	var id = updatedIssues.issues[x].id;
                    	// #################### INSERT COMMENTING DATA IN TO ISSUE_COMMENTS TABLE #####################
                    	var issue = getCommenter(issueKey);
                    	var issueContent = JSON.parse(issue.data); 
                    	
                    	if(issueContent.issues[0].fields.comment !== null){
                    		var noOfComments = issueContent.issues[0].fields.comment.maxResults;
                    		
                    		for(var p=0;p<noOfComments;p++){
                    			commentDate = issueContent.issues[0].fields.comment.comments[p].created;
                    			commenter = issueContent.issues[0].fields.comment.comments[p].author.emailAddress;
                    			var splittedDate = commentDate.split('-')[0]+"-"+commentDate.split('-')[1]+"-"+commentDate.split('-')[2]+"Z";
                    			var csDate = new Date(splittedDate);

                    			if(getDateDiff(csDate,date)<14){
                    				log.debug("Inside the date range checker for PMT_Jira Database");	
                    				
                    				var query2  = "INSERT INTO ISSUE_COMMENTS (JIRA_KEY, COMMENTED_DATE, COMMENTER) VALUES('"+issueKey+"' , '"+commentDate+"', '"+commenter+"');";
                    				db.query(query2);
                    			}                   			
                      		}
                    	}
                    	// #################### INSERT WORKLOG DATA IN TO ISSUE_WORKLOG TABLE #####################
                    	var worklog = getWorklog(issueKey);
                    	var worklogContent = JSON.parse(worklog.data);
                    	var wlTotal = worklogContent.issues[0].fields.worklog.total;
                    	if(wlTotal-s<20)
                    	    maxCm = wlTotal;
                    	else 
                    	    maxCm= 1000;
                    	
                    	
                    	
                    	// #############################################################################################
               		}         													 	
               }                
               log.debug("Insertion in to ISSUE_COMMENTS finished successfully.");
            // #################### INSERT RESOLUTION DATA IN TO ISSUE_RESOLUTION TABLE #####################
               var maxCr = 0;
                                        
                            for(var s=0;s<resolutionTotal;s+=1000){
                                var resolvedIssues = JSON.parse(getResolution(s).data); 		
                                log.debug(resolvedIssues);
                                if(resolutionTotal-s<1000)
                                   maxCr = resolutionTotal;
                                else 
                                   maxCr= 1000;
                                        
                                   for(var x=0;x<maxCr;x++){            													
                                   	var reIssueKey = resolvedIssues.issues[x].key;
                                   	var reUrl = supJiraURL+reIssueKey;
                                   	log.debug(reIssueKey);
                                   	
                                   	var reIssue = getResolver(reIssueKey);
                                   	var reIssueContent = JSON.parse(reIssue.data); 
               
                                   	var reDate = reIssueContent.issues[0].fields.resolutiondate;
                                   	
                                   	var historyCount = reIssueContent.issues[0].changelog.total;
                                   	
                                   	for(var p=0;p<historyCount;p++){
                                   		var changedDate = reIssueContent.issues[0].changelog.histories[p].created;
                                   		
                                   		if(reDate == changedDate){
                                   			log.debug("Inside the date comparator for PMT_Jira Database");
                                   			var resolver = reIssueContent.issues[0].changelog.histories[p].author.name;

                                   			var query3  = "INSERT INTO ISSUE_RESOLUTION (JIRA_KEY,JIRA_URL,RESOLVED_DATE, RESOLVED_BY) VALUES('"+reIssueKey+"','"+reUrl+"', '"+reDate+"', '"+resolver+"');";
                                   			db.query(query3);
                                   			break;
                                   		}
               
                                   	}                                   	
                              	 }         													 	
                              }                
               log.debug("Insertion in to ISSUE_RESOLUTION finished successfully.");
            // ############################################################################################
            
                
       }
            
        catch(e){
            log.error("Error occurred while retrieving information from Jira API : "+ e.toString());
        }
        
        finally{
                    db.close();
        }
        
%>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">

<html lang="en">
<head>

<style type="text/css">

table.rotationt {
	table-layout:fixed;
	overflow: scroll;
	width: auto;
}

table.rotationt th {
	padding: 0.500em;	
	text-align: center;	
	height:35px;		
	
}

table.rotationt td {
	padding: 0.500em;
	text-align: center;	
	border-right-color: #FFA500;
	height:30px;
	
	
}

table.rotationt tr:nth-child(odd) { background-color: #edf0f0; }

	/* Push the first cell to the right so it doesn't stick to the table border */
table.rotationt td:first-child, table.rotationt th:first-child {
		width: 15%;
		text-align: center;
		padding: 0;
		/*border: none;
		border-bottom: 1px solid #f8f9fa;*/
	}
	
table.rotationt td:nth-child(2), table.rotationt th:nth-child(2) {
	width: 25%;
	text-align: center;
	padding: 0;
	/*border: none;
	border-bottom: 1px solid #f8f9fa;*/
}
table.rotationt td:nth-child(3), table.rotationt th:nth-child(2) {
	width: 30%;
	text-align: center;
	padding: 0;
	/*border: none;
	border-bottom: 1px solid #f8f9fa;*/
}
table.rotationt td:nth-child(4), table.rotationt th:nth-child(2) {
	width: 30%;
	text-align: center;
	padding: 0;
	/*border: none;
	border-bottom: 1px solid #f8f9fa;*/
}

table.rotationt {
  overflow: hidden;
}

table.rotationt tr:hover {
  background-color: #ffd11a;
}

table.rotationt td, table.rotationt th {
  position: relative;
}



</style>
</head>
<body>
<table id="rotationt" class="rotationt"  style="width:100%">
                                             <thead>
                                        			<tr >                                                   
                                                     <th>Key</th>
                                                     <th>URL</th>
                                                     <th>Resolved Date</th>   
                                                     <th>Inside Date</th>                                                   
                                                     <th>Resolver</th>

                                                     
                                                                                
                                        			</tr>
                                        		</thead>
                                        		
                                        		<tbody>


<%
			 var maxWl = 0;
                         
             for(var s=0;s<updatedTotal;s+=1000){
                 var resolvedIssues = JSON.parse(getResolution(s).data); 		
                 log.debug(resolvedIssues);
                 if(resolutionTotal-s<1000)
                    maxCr = resolutionTotal;
                 else 
                    maxCr= 1000;
                         
                    for(var x=0;x<maxCr;x++){            													
                    	var reIssueKey = resolvedIssues.issues[x].key;
                    	var ur = supJiraURL+reIssueKey;
                    	log.debug(reIssueKey);
                    	
                    	var reIssue = getResolver(reIssueKey);
                    	var reIssueContent = JSON.parse(reIssue.data); 

                    	var reDate = reIssueContent.issues[0].fields.resolutiondate;
                    	
                    	var historyCount = reIssueContent.issues[0].changelog.total;
                    	
                    	for(var p=0;p<historyCount;p++){
                    		var changedDate = reIssueContent.issues[0].changelog.histories[p].created;
                    		
                    		if(reDate == changedDate){
                    			var resolver = reIssueContent.issues[0].changelog.histories[p].author.name; %>
                    			<tr>
                    			<td><% print(reIssueKey); %></td>
                    			<td><a href="<% print(ur); %>"><% print(ur); %>  </a></td>
                    			<td><% print(reDate); %></td>
                    			<td><% print(changedDate); %></td>
                    			<td><% print(resolver); %></td>
                    			</tr>
                    		<% }

                    	}
                    	
                    	
                    	
                    	
                    	
               		 }         													 	
               } 

               
   %>
   
   </tbody>
   </table>
</body>
</html>

<%
}

else {
    var location = request.getRequestURL()+"?"+encodeURIComponent(request.getQueryString());
    response.sendRedirect("../index.jag?reject=timedout&location="+location);  //exit
}
%>
